ref:
####	https://github.com/nodesource/distributions



sudo apt-get update
sudo apt-get install -y ca-certificates curl gnupg
sudo mkdir -p /etc/apt/keyrings
curl -fsSL https://deb.nodesource.com/gpgkey/nodesource-repo.gpg.key | sudo gpg --dearmor -o /etc/apt/keyrings/nodesource.gpg


NODE_MAJOR=20
echo "deb [signed-by=/etc/apt/keyrings/nodesource.gpg] https://deb.nodesource.com/node_$NODE_MAJOR.x nodistro main" | sudo tee /etc/apt/sources.list.d/nodesource.list


sudo apt-get update
sudo apt-get install nodejs -y
npm install --save-dev @nomiclabs/hardhat-ethers ethers @nomiclabs/hardhat-waffle ethereum-waffle chai
	
			
mkdir test
cd test
npx hardhat
cd contract
vi Hello.sol

pragma solidity ^0.8.9;

// Store a single data point and allow fetching/updating of that datapoint
contract Hello {

    // data point
    string public storedData;

    event myEventTest(string eventOutput);

    function set(string memory myText) public {
        storedData = myText;
        emit myEventTest(myText);
    }

    function get() public view returns (string memory) {
        return storedData;
    }

}




npx hardhat node --hostname localhost    # make sure to run as localhost vs the dns


npx hardhat console --network localhost
Downloading compiler 0.8.19
Warning: SPDX license identifier not provided in source file. Before publishing, consider adding a comment containing "SPDX-License-Identifier: <SPDX-License>" to each source file. Use "SPDX-License-Identifier: UNLICENSED" for non-open-source code. Please see https://spdx.org for more information.
--> contracts/Hello.sol


Compiled 2 Solidity files successfully
Welcome to Node.js v20.5.1.
Type ".help" for more information.
> const contract = await ethers.getContractFactory("Hello")
undefined
> const { ethers } = require("ethers");
undefined
> const provider = new ethers.WebSocketProvider("ws://localhost:8545")
undefined
> const cd = await contract.deploy()
undefined
> const filter = econtract.filters.myEventTest(null)
Uncaught ReferenceError: econtract is not defined
> const filter = cd.filters.myEventTest(null)
Uncaught SyntaxError: Identifier 'filter' has already been declared
> const filter2 = cd.filters.myEventTest(null)
undefined
> cd.on(filter2, (info) => {  console.log("info",info); });
Promise {
  <pending>,
  [Symbol(async_id_symbol)]: 2435,
  [Symbol(trigger_async_id_symbol)]: 13
}
> cd.set('hi')
Promise {
  <pending>,
  [Symbol(async_id_symbol)]: 10916,
  [Symbol(trigger_async_id_symbol)]: 13
}
> info ContractEventPayload {
  filter: PreparedTopicFilter {
    fragment: EventFragment {
      type: 'event',
      inputs: [Array],
      name: 'myEventTest',
      anonymous: false
    }
  },
  emitter: BaseContract {
    target: '0x5FbDB2315678afecb367f032d93F642f64180aa3',
    interface: Interface {
      fragments: [Array],
      deploy: [ConstructorFragment],
      fallback: null,
      receive: false
    },
    runner: HardhatEthersSigner {
      _gasLimit: 30000000,
      address: '0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266',
      provider: [HardhatEthersProvider]
    },
    filters: {},
    fallback: null,
    [Symbol(_ethersInternal_contract)]: {}
  },
  log: EventLog {
    provider: HardhatEthersProvider {
      _hardhatProvider: [LazyInitializationProviderAdapter],
      _networkName: 'localhost',
      _blockListeners: [Array],
      _transactionHashListeners: Map(0) {},
      _eventListeners: [Array],
      _isHardhatNetworkCached: true,
      _latestBlockNumberPolled: 2,
      _blockPollingInterval: Timeout {
        _idleTimeout: 50,
        _idlePrev: [TimersList],
        _idleNext: [TimersList],
        _idleStart: 169840,
        _onTimeout: [AsyncFunction (anonymous)],
        _timerArgs: undefined,
        _repeat: 50,
        _destroyed: false,
        [Symbol(refed)]: true,
        [Symbol(kHasPrimitive)]: false,
        [Symbol(asyncId)]: 2600,
        [Symbol(triggerId)]: 2562
      }
    },
    transactionHash: '0x929a99ce4b95f94448333e4dacc34ccc3b2660fffe30e4703c11b224930ed345',
    blockHash: '0xb6d813e69d3ae7471a7f946a4d1003fdd03b9d79ffaa3bf274d41c7a61a83355',
    blockNumber: 2,
    removed: false,
    address: '0x5FbDB2315678afecb367f032d93F642f64180aa3',
    data: '0x000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000026869000000000000000000000000000000000000000000000000000000000000',
    topics: [
      '0x319b9e64f64b033d6b8102f9688735cefac53d266b6e85d21cf85e9856fc7b99'
    ],
    index: 0,
    transactionIndex: 0,
    interface: Interface {
      fragments: [Array],
      deploy: [ConstructorFragment],
      fallback: null,
      receive: false
    },
    fragment: EventFragment {
      type: 'event',
      inputs: [Array],
      name: 'myEventTest',
      anonymous: false
    },
    args: Result(1) [ 'hi' ]
  },
  args: Result(1) [ 'hi' ],
  fragment: EventFragment {
    type: 'event',
    inputs: [ [ParamType] ],
    name: 'myEventTest',
    anonymous: false
  }
}
> cd.get()
Promise {
  <pending>,
  [Symbol(async_id_symbol)]: 25868,
  [Symbol(trigger_async_id_symbol)]: 13
}
> await cd.get()
'hi'
> cd.set('hiii')
Promise {
  <pending>,
  [Symbol(async_id_symbol)]: 103200,
  [Symbol(trigger_async_id_symbol)]: 13
}
> info ContractEventPayload {
  filter: PreparedTopicFilter {
    fragment: EventFragment {
      type: 'event',
      inputs: [Array],
      name: 'myEventTest',
      anonymous: false
    }
  },
  emitter: BaseContract {
    target: '0x5FbDB2315678afecb367f032d93F642f64180aa3',
    interface: Interface {
      fragments: [Array],
      deploy: [ConstructorFragment],
      fallback: null,
      receive: false
    },
    runner: HardhatEthersSigner {
      _gasLimit: 30000000,
      address: '0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266',
      provider: [HardhatEthersProvider]
    },
    filters: {},
    fallback: null,
    [Symbol(_ethersInternal_contract)]: {}
  },
  log: EventLog {
    provider: HardhatEthersProvider {
      _hardhatProvider: [LazyInitializationProviderAdapter],
      _networkName: 'localhost',
      _blockListeners: [Array],
      _transactionHashListeners: Map(0) {},
      _eventListeners: [Array],
      _isHardhatNetworkCached: true,
      _latestBlockNumberPolled: 3,
      _blockPollingInterval: Timeout {
        _idleTimeout: 50,
        _idlePrev: [TimersList],
        _idleNext: [TimersList],
        _idleStart: 267486,
        _onTimeout: [AsyncFunction (anonymous)],
        _timerArgs: undefined,
        _repeat: 50,
        _destroyed: false,
        [Symbol(refed)]: true,
        [Symbol(kHasPrimitive)]: false,
        [Symbol(asyncId)]: 2600,
        [Symbol(triggerId)]: 2562
      }
    },
    transactionHash: '0x5a2a81504960bd4aa0a931b2d91be7825d992360ab8054c88095f0a11ce8152d',
    blockHash: '0x11b4b4a06f5c0cb402866c3b91adfec037994e9744ea07a5f2d7f3bcc20dac56',
    blockNumber: 3,
    removed: false,
    address: '0x5FbDB2315678afecb367f032d93F642f64180aa3',
    data: '0x000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000046869696900000000000000000000000000000000000000000000000000000000',
    topics: [
      '0x319b9e64f64b033d6b8102f9688735cefac53d266b6e85d21cf85e9856fc7b99'
    ],
    index: 0,
    transactionIndex: 0,
    interface: Interface {
      fragments: [Array],
      deploy: [ConstructorFragment],
      fallback: null,
      receive: false
    },
    fragment: EventFragment {
      type: 'event',
      inputs: [Array],
      name: 'myEventTest',
      anonymous: false
    },
    args: Result(1) [ 'hiii' ]
  },
  args: Result(1) [ 'hiii' ],
  fragment: EventFragment {
    type: 'event',
    inputs: [ [ParamType] ],
    name: 'myEventTest',
    anonymous: false
  }
}

(To exit, press Ctrl+C again or Ctrl+D or type .exit)
>
ubuntu@ip-172-31-47-223:~/test$ ^C
ubuntu@ip-172-31-47-223:~/test$ ^C
ubuntu@ip-172-31-47-223:~/test$ npx hardhat console --network localhost
Welcome to Node.js v20.5.1.
Type ".help" for more information.
>



## view the transaction log ..


npx hardhat console --network localhost




> const contract = await ethers.getContractFactory("Hello")

> const signers = await ethers.getSigners();

> const bal = await ethers.provider.getBalance(signers[0])

> const cd = await contract.deploy()



> await cd.set('aaa')

> await cd.get()


# make sure I am under the artifact directory....
> const contractArtifact = JSON.parse(fs.readFileSync("Hello.json", 'utf8'));



> iface = new ethers.Interface(contractArtifact.abi)


> let tx = await cd.set('abaa')

let tx = await cd.set('abaa')

> iface
Interface {
  fragments: [
    EventFragment {
      type: 'event',
      inputs: [Array],
      name: 'myEventTest',
      anonymous: false
    },
    FunctionFragment {
      type: 'function',
      inputs: [],
      name: 'get',
      constant: true,
      outputs: [Array],
      stateMutability: 'view',
      payable: false,
      gas: null
    },
    FunctionFragment {
      type: 'function',
      inputs: [Array],
      name: 'set',
      constant: false,
      outputs: [],
      stateMutability: 'nonpayable',
      payable: false,
      gas: null
    },
    FunctionFragment {
      type: 'function',
      inputs: [],
      name: 'storedData',
      constant: true,
      outputs: [Array],
      stateMutability: 'view',
      payable: false,
      gas: null
    }
  ],
  deploy: ConstructorFragment {
    type: 'constructor',
    inputs: [],
    payable: false,
    gas: null
  },
  fallback: null,
  receive: false
}


> const txReceipt = await ethers.provider.getTransactionReceipt(tx.hash);


> iface.parseLog(txReceipt.logs[0])




> iface.parseLog(txReceipt.logs[0])
LogDescription {
  fragment: EventFragment {
    type: 'event',
    inputs: [ [ParamType] ],
    name: 'myEventTest',
    anonymous: false
  },
  name: 'myEventTest',
  signature: 'myEventTest(string)',
  topic: '0x319b9e64f64b033d6b8102f9688735cefac53d266b6e85d21cf85e9856fc7b99',
  args: Result(1) [ 'abaa' ]
}

npx hardhat console --network localhost
Welcome to Node.js v20.5.1.
Type ".help" for more information.
> const contract = await ethers.getContractFactory("Hello")
undefined
> const { ethers } = require("ethers");
undefined
> const cd = await contract.deploy()
undefined
> let tx = await cd.set('abaa')
undefined
> const txReceipt = await ethers.provider.getTransactionReceipt(tx.hash);
Uncaught:
TypeError: Cannot read properties of undefined (reading 'getTransactionReceipt')
    at REPL5:1:71
> tx.hash
'0x5ed49d8685e0732172ec86b51923b56ccc59fa9b7cc769e94403f6a6729308c3'
> await ethers.provider.getBalance(dp)
Uncaught TypeError: Cannot read properties of undefined (reading 'getBalance')
    at REPL32:1:55
> const { ethers } = require("ethers");
Uncaught SyntaxError: Identifier 'ethers' has already been declared
> const txReceipt = await ethers.getTransactionReceipt(tx.hash);
Uncaught SyntaxError: Identifier 'txReceipt' has already been declared
> await ethers.getTransactionReceipt(tx.hash);
Uncaught TypeError: ethers.getTransactionReceipt is not a function
    at REPL37:1:46



 npx hardhat console --network localhost
Welcome to Node.js v20.5.1.
Type ".help" for more information.
> const contract = await ethers.getContractFactory("Hello")
undefined
> const cd = await contract.deploy()
undefined
> let tx = await cd.set('abaa')
undefined
> const txReceipt = await ethers.getTransactionReceipt(tx.hash);
Uncaught TypeError: ethers.getTransactionReceipt is not a function
    at REPL10:1:62
> const txReceipt = await ethers.getTransactionRece
> const txReceipt = await ethers.provider.getTransactionReceipt(tx.hash);
Uncaught SyntaxError: Identifier 'txReceipt' has already been declared
> const txReceipt2 = await ethers.provider.getTransactionReceipt(tx.hash);
undefined


works if i do not declare the ether.....
> iface.parseLog(txReceipt2.logs[0])
Uncaught ReferenceError: iface is not defined




